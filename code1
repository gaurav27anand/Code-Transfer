import pandas as pd
import matplotlib.pyplot as plt
from sqlalchemy import create_engine

# Replace with your actual database connection string
DATABASE_URI = 'sqlite:///your_database.db'  # Example for SQLite, adjust if using a different database
engine = create_engine(DATABASE_URI)

# SQL query to get all data from the view
query = """
    SELECT runID, pipeline_name, result, durationinmillis
    FROM your_view_name;
"""

# Load data into a DataFrame
df = pd.read_sql(query, engine)

# Convert duration from milliseconds to minutes for better readability
df['duration_in_minutes'] = df['durationinmillis'] / (60 * 1000)

# Calculate Metrics
total_runs = len(df)
max_runtime = df['duration_in_minutes'].max()
min_runtime = df['duration_in_minutes'].min()
average_runtime = df['duration_in_minutes'].mean()
number_of_success = len(df[df['result'] == 'SUCCESS'])
number_of_failures = len(df[df['result'] == 'FAILURE'])
success_rate = (number_of_success / total_runs) * 100

# Display Metrics
print(f"Total Runs: {total_runs}")
print(f"Max Runtime: {max_runtime:.2f} min")
print(f"Min Runtime: {min_runtime:.2f} min")
print(f"Average Runtime: {average_runtime:.2f} min")
print(f"Number of Successes: {number_of_success}")
print(f"Number of Failures: {number_of_failures}")
print(f"Success Rate: {success_rate:.2f}%")

# List of Failed Runs
failed_runs = df[df['result'] == 'FAILURE'][['runID', 'pipeline_name', 'duration_in_minutes']]
print("\nList of Failed Runs:")
print(failed_runs)

# Generate Pipeline Runtime Graph
plt.figure(figsize=(12, 8))

# Color coding: Green for 'SUCCESS' and Red for 'FAILURE'
colors = df['result'].apply(lambda x: 'green' if x == 'SUCCESS' else 'red')

# Bar plot for runtimes
plt.bar(df['runID'], df['duration_in_minutes'], color=colors)

# Labels and Title
plt.xlabel('Run ID')
plt.ylabel('Runtime (minutes)')
plt.title('Pipeline Runtimes: Green = Success, Red = Failure')
plt.xticks(rotation=90)  # Rotate x-axis labels for better visibility
plt.tight_layout()

# Save the graph to a file
plt.savefig('pipeline_runtime_graph.png')

# Show the graph
plt.show()
