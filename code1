import os
import json
import re

def sanitize_filename(filename):
    """Sanitize the filename by removing invalid characters."""
    return re.sub(r'[<>:"/\\|?*\x00-\x1F]', '', filename)

def write_to_file(output_filename, batch_blocks, count):
    """Helper function to write JSON blocks to a file."""
    with open(output_filename, 'a') as file:
        if count == 1:
            file.write('[')
        else:
            file.write(',')
        file.write(json.dumps(batch_blocks))
        file.write(']')
        file.close()

# Initialize dictionaries and sets
generated_blocks_for_ = {}
generated_blocks = set()

for project in project_list:
    generated_blocks_for_[project] = []

# Loop through the diff_json and extract matching blocks for each project
for index, diff_item in enumerate(diff_json):
    if isinstance(diff_item, dict):
        old_name = diff_item.get('oldName')
        if old_name:
            for project in project_list:
                regex = re.compile(project)
                if isinstance(old_name, str) and regex.search(old_name):
                    generated_blocks_for_[project].append(diff_item)
        else:
            print(f"No file name present in {diff_item}")

# Write blocks to files, splitting by 100 blocks each time
for project in project_list:
    output_filename_base = os.path.join(diff_dir, f"block_of_{sanitize_filename(project)}")
    
    blocks = generated_blocks_for_[project]
    total_blocks = len(blocks)
    
    part_number = 1
    count = 1
    
    for start in range(0, total_blocks, 100):
        end = min(start + 100, total_blocks)
        batch_blocks = blocks[start:end]
        
        # Add part number to filename if there are multiple batches
        output_filename = f"{output_filename_base}_part{part_number}.json"
        part_number += 1
        
        # Write the current batch of blocks to the file
        write_to_file(output_filename, batch_blocks, count)
        count += 1

        # Store the generated filename
        generated_blocks.add(output_filename)
    
    print(f"Saved {len(blocks)} blocks matching '{project}' to files with base name '{output_filename_base}'")
