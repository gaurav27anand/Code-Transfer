import time
import socket
import psutil
from flask import Flask
from prometheus_flask_exporter import PrometheusMetrics

app = Flask(__name__)
metrics = PrometheusMetrics(app)
hostname = socket.gethostname()

# Define metrics with descriptions
uptime_metric = metrics.info('app_uptime_seconds', 'Uptime of the Flask app in seconds')
memory_usage_metric = metrics.gauge('memory_usage_bytes', 'Memory usage of the Flask app in bytes')

# Track start time for uptime calculation
start_time = time.time()

@app.before_request
def update_metrics():
    """Update uptime and memory usage before each request."""
    uptime = time.time() - start_time
    memory_usage = psutil.Process().memory_info().rss

    # Set metric values
    uptime_metric.set(uptime)
    memory_usage_metric.set(memory_usage)

@app.route('/some-endpoint')
def some_endpoint():
    time.sleep(0.5)  # Simulate processing
    return "Response content"

@app.route('/another-endpoint')
def another_endpoint():
    time.sleep(0.3)  # Simulate processing
    return "Another response content"

@app.route('/hostname')
def get_hostname():
    return hostname  # Serve hostname as a separate endpoint if needed

if __name__ == "__main__":
    app.run(port=8000)
